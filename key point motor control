import cv2
from picamera2 import Picamera2
from ultralytics import YOLO
import pygame
import numpy as np
import random
from collections import deque
import threading
import time
import math
import RPi.GPIO as GPIO

# Load YOLO model
model = YOLO("yolo11n-pose.pt")

# Keypoint detection function
def get_keypoint_position(results, keypoint_num, axis='x'):
    """ 
    Keypoint reference:
        0: nose          5: left_shoulder  10: right_wrist    15: left_ankle
        1: left_eye      6: right_shoulder 11: left_hip       16: right_ankle
        2: right_eye     7: left_elbow     12: right_hip
        3: left_ear     8: right_elbow    13: left_knee
        4: right_ear    9: left_wrist     14: right_knee
    """
    if not 0 <= keypoint_num <= 16:
        raise ValueError("Keypoint number must be between 0 and 16")
    if axis.lower() not in ['x', 'y']:
        raise ValueError("Axis must be 'x' or 'y'")
    
    # Get the keypoint data
    keypoint = results[0].keypoints.xyn[0][keypoint_num]
    
    # Return x or y coordinate based on axis parameter
    return keypoint[0].item() if axis.lower() == 'x' else keypoint[1].item()

# Set up the camera with Picam
picam2 = Picamera2()
picam2.preview_configuration.main.size = (1280, 1280)
picam2.preview_configuration.main.format = "RGB888"
picam2.preview_configuration.align()
picam2.configure("preview")
picam2.start()


# Shared variables
latest_y_value = 0.5
pose_thread_running = True
previous_nose_x, previous_nose_y= 0, 0
previous_LA_x, previous_LA_y= 0, 0
previous_RA_x, previous_RA_y= 0, 0

Dir = 22
Step = 23
CW = 1
CCW = 0

GPIO.setmode(GPIO.BCM)
GPIO.setup(Dir, GPIO.OUT)
GPIO.setup(Step, GPIO.OUT)
stop_event=threading.Event()


def move_stepper():
    while not stop_event.is_set():
        for x in range(100):
            GPIO.output(Step, GPIO.HIGH)
            time.sleep(0.005/6)
            GPIO.output(Step, GPIO.LOW)
            time.sleep(0.005/6)
def start_stepper():
    global stepper_thread
    stop_event.clear()
    stepper_thread=threading.Thread(target=move_stepper)
    stepper_thread.start()
    


def LA_y_detection_thread():
    global latest_y_value
    global previous_LA_y
    while True:
        frame = picam2.capture_array()
        results = model.predict(frame, imgsz=320, verbose=False)
        try:
            # Use the new keypoint detection function
            LA_y = get_keypoint_position(results, 9, 'y')  # 0 is the nose keypoint
            latest_y_value = LA_y
            if abs(latest_y_value - previous_LA_y) <=0.04:
                stop_event.set()
                stepper_thread.join()
                print("true")
            if abs(latest_y_value - previous_LA_y) >0.04:
                start_stepper()
                print(latest_y_value)
                print("false")
                if latest_y_value < previous_LA_y:
                    GPIO.output(Dir, CCW)
                    print("CCW")
                if latest_y_value > previous_LA_y:
                    print("CW")
                    GPIO.output(Dir, CW)
            time.sleep(0.1) #0.1 seconds for update delay
            previous_LA_y = latest_y_value
            
        except (IndexError, AttributeError):
            # Keep the previous value if detection fails
            pass
        time.sleep(0.06)

# Start pose detection thread
LA_y_thread = threading.Thread(target=LA_y_detection_thread)
LA_y_thread.start()


 
    

# Cleanup
pose_thread_running = False
LA_y_thread.join()
picam2.stop()
pygame.quit()
