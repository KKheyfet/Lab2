import cv2
from picamera2 import Picamera2
from ultralytics import YOLO
import pygame
import numpy as np
import random
from collections import deque
import threading
import time
import math
import RPi.GPIO as GPIO




# Shared variables
latest_y_value = 0.5
latest_x_value = 0.5
pose_thread_running = True
previous_nose_x, previous_nose_y= 0, 0
previous_LA_x, previous_LA_y= 0, 0
previous_RA_x, previous_RA_y= 0, 0

Dir = 22
Step = 23
Dir1 = 17
Step1 = 18
CW = 1
CCW = 0

GPIO.setmode(GPIO.BCM)
GPIO.setup(Dir, GPIO.OUT)
GPIO.setup(Step, GPIO.OUT)
GPIO.setup(Dir1, GPIO.OUT)
GPIO.setup(Step1, GPIO.OUT)
stop_event=threading.Event()
stop_event1=threading.Event()


def move_stepper():
    while not stop_event.is_set():
        for x in range(100):
            GPIO.output(Step, GPIO.HIGH)
            time.sleep(0.005/6)
            GPIO.output(Step, GPIO.LOW)
            time.sleep(0.005/6)
            
def start_stepper():
    global stepper_thread
    stop_event.clear()
    stepper_thread=threading.Thread(target=move_stepper)
    stepper_thread.start()
    
def move_stepper1():
    while not stop_event1.is_set():
        for y in range(100):
            GPIO.output(Step1, GPIO.HIGH)
            time.sleep(0.005/6)
            GPIO.output(Step1, GPIO.LOW)
            time.sleep(0.005/6)

def start_stepper1():
    global stepper_thread1
    stop_event1.clear()
    stepper_thread1=threading.Thread(target=move_stepper1)
    stepper_thread1.start() 


def LA_y_detection_thread():
    global latest_y_value
    global previous_LA_y
    while True:
        frame = picam2.capture_array()
        results = model.predict(frame, imgsz=320, verbose=False)
        try:
            # Use the new keypoint detection function
            LA_y = get_keypoint_position(results, 9, 'y')  # 0 is the nose keypoint
            latest_y_value = LA_y
            if abs(latest_y_value - previous_LA_y) <=0.04:
                stop_event.set()
                stepper_thread.join()
                print("true")
            if abs(latest_y_value - previous_LA_y) >0.04:
                start_stepper()
                print(latest_y_value)
                print("false")
                if latest_y_value < previous_LA_y:
                    GPIO.output(Dir, CCW)
                    print("CCW")
                if latest_y_value > previous_LA_y:
                    print("CW")
                    GPIO.output(Dir, CW)
            time.sleep(0.1) #0.1 seconds for update delay
            previous_LA_y = latest_y_value
            
        except (IndexError, AttributeError):
            # Keep the previous value if detection fails
            pass
        time.sleep(0.06)

# Start pose detection thread
LA_y_thread = threading.Thread(target=LA_y_detection_thread)
LA_y_thread.start()

def LA_x_detection_thread():
    global latest_x_value
    global previous_LA_x
    while True:
        frame = picam2.capture_array()
        results = model.predict(frame, imgsz=320, verbose=False)
        try:
            # Use the new keypoint detection function
            LA_x = get_keypoint_position(results, 9, 'x')  # 0 is the nose keypoint
            latest_x_value = LA_x
            if abs(latest_x_value - previous_LA_x) <=0.04:
                stop_event1.set()
                stepper_thread1.join()
                print("xtrue")
            if abs(latest_x_value - previous_LA_x) >0.04:
                start_stepper1()
                print(latest_x_value)
                print("xfalse")
                if latest_x_value < previous_LA_x:
                    GPIO.output(Dir1, CCW)
                    print("xCCW")
                if latest_x_value > previous_Lx_y:
                    print("xCW")
                    GPIO.output(Dir1, CW)
            time.sleep(0.1) #0.1 seconds for update delay
            previous_LA_x = latest_x_value
            
        except (IndexError, AttributeError):
            # Keep the previous value if detection fails
            pass
        time.sleep(0.06)

# Start pose detection thread
LA_x_thread = threading.Thread(target=LA_x_detection_thread)
LA_x_thread.start()

 
    

# Cleanup
pose_thread_running = False
LA_y_thread.join()
picam2.stop()
pygame.quit()
