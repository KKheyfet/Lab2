
import threading
import time
import math
import requests
import Jetson.GPIO as GPIO
import keyboard

LA_x = 1
LA_y = 2
CW=1
CCW=0
Step=7    #the physical pin number 7 on jetson
Dir=10    #the physical pin number 10 on jetson
limit_switch_pin = 17   #the physical pin number 17 on jetson
step_count=0 #initialize value for testing, later can be an input from motion capture
stepper = True
GPIO.setmode(GPIO.BOARD)
GPIO.setup(Dir, GPIO.OUT)
GPIO.setup(Step, GPIO.OUT)
GPIO.setup(limit_switch_pin, GPIO.IN)
command_done = threading.Event()

def mode_select():
    while True:
        if not command_done.is_set():  # Only prompt if not calibrating
            Mode = input("Enter mode (C/S/Q): ").lower()
            if Mode == 'c':
                print('Calibration started')
                command_done.clear()
                threading.Thread(target=calibration).start()
            elif Mode == 's':
                print('Mirroring started')
                command_done.clear()
                threading.Thread(target=move_stepper).start()
            elif Mode == 'q':
                print('quit and reset tp A pose')
                command_done.clear()
                threading.Thread(target=A_pose_reset).start()

def calibration():
    global LA_x, LA_y
    anchor_x=LA_x
    anchor_y=LA_y
    print(f"Calibrating... anchor_x: {anchor_x}, anchor_y: {anchor_y}")
    time.sleep(2)  # Simulate work
    print("Calibration complete!")
    command_done.set()  # Signal completion
    mode_select_thread.join()
mode_select_thread = threading.Thread(target=mode_select)
mode_select_thread.start()
        
        
def move_stepper(): 
    global step_count
    for x in range(step_count):
        GPIO.output(Step, GPIO.HIGH)
        time.sleep(0.005/6)
        GPIO.output(Step, GPIO.LOW)
        time.sleep(0.005/6)
        command_done.set()
        mode_select_thread.join()
    
def A_pose_reset():
    while GPIO.input(limit_switch_pin):    
        GPIO.output(Dir, CCW) 
        GPIO.output(Step, GPIO.HIGH)
        time.sleep(0.005/6)
        GPIO.output(Step, GPIO.LOW)
        time.sleep(0.005/6)
        if not GPIO.input(limit_switch_pin):
            print("Switch is triggered.")
            command_done.set()
            mode_select_thread.join()
            break
    
        

def motor_step_count():
    global step_count
    
        
        


def LA_y_detection_thread():
    global latest_y_value
    global previous_LA_y
    global LA_y
    while True:
        try:
            # Use the new keypoint detection function
            latest_y_value = LA_y
            if abs(latest_y_value - previous_LA_y) >0.04:
                if latest_y_value < previous_LA_y:
                    GPIO.output(Dir, CCW)
                    print("LAY_CCW")
                if latest_y_value > previous_LA_y:
                    print("LAY_CW")
                    GPIO.output(Dir, CW)
            time.sleep(0.1) #0.1 seconds for update delay
            previous_LA_y = latest_y_value
            
        except (IndexError, AttributeError):
            # Keep the previous value if detection fails
            pass
        time.sleep(0.06)
# Start pose detection thread
LA_y_thread = threading.Thread(target=LA_y_detection_thread)
LA_y_thread.start()

def LA_x_detection_thread():
    global latest_x_value
    global previous_LA_x
    global LA_x
    while True:
        try:
            latest_x_value = LA_x
            if abs(latest_x_value - previous_LA_x) >0.04:
                
                if latest_x_value < previous_LA_x:
                    GPIO.output(Lax_Dir, CCW)
                    print("LAX_CCW")
                if latest_x_value > previous_LA_x:
                    print("LAX_CW")
                    GPIO.output(Lax_Dir, CW)
            time.sleep(0.1) #0.1 seconds for update delay
            previous_LA_x = latest_x_value
            
        except (IndexError, AttributeError):
            # move stepper back into A pose
            pass
        time.sleep(0.06)
LA_x_thread = threading.Thread(target=LA_x_detection_thread)
LA_x_thread.start()

    





 
    
