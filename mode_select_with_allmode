# receiver.py
import socket
import time
import math
import serial
import select
import threading
import tkinter as tk
#//////////////////////////////////////////////////////////////////////
#initialize all value
reset=0
LA_y=0
LA_x=0
RA_x=0
RA_y=0
lf_y=0
rf_y=0
left_shoulder_y=0
left_shoulder_x=0
right_shoulder_x=0
right_shoulder_y=0
anchor_la_y=0
anchor_la_x=0
anchor_ra_y=0
anchor_ra_x=0
max_arm_y_step_range=420
max_arm_x_step_range=210
max_leg_y_step_range=480
max_bow_y_step_range=100
max_hip_y_step_range=200
LA_x_step_count=0 #initialize value for testing, later can be an input from motion capture
LA_y_step_count=0
RA_x_step_count=0 #initialize value for testing, later can be an input from motion capture
RA_y_step_count=0
lf_y_step_count=0
rf_y_step_count=0
shoulder_step_count =0
hip_step_count=0
command_done = threading.Event()
calibration_done = threading.Event()
move_stepper_done=threading.Event()
A_pose_reset_done=threading.Event()
#//////////////////////////////////////////////////////////////////////////////
ser = serial.Serial('/dev/ttyACM0', 9600)  # Make sure baudrate matches Arduino
time.sleep(2)  # Give Arduino time to reset
#//////////////////////////////////////////////////////////////////////////////
def handle_client(conn, addr):
    global LA_x
    global LA_y
    global RA_x
    global RA_y
    global ls_x
    global ls_y
    global rs_x
    global rs_y
    global lh_y, rh_y, lf_y, rf_y
    print(f"[+] Connection from {addr}")
    buffer = ""

    try:
        while True:
            data = conn.recv(1024).decode()
            if not data:
                break
            buffer += data
            while "\n" in buffer:
                line, buffer = buffer.split("\n", 1)
                #print("[Received]", line)

                try:
                    x_str, y_str, ls_x_str, ls_y_str, ra_x_str, ra_y_str, rs_x_str, rs_y_str,lh_y_str, rh_y_str, lf_y_str, rf_y_str = line.strip().split(",")
                    LA_x = int(x_str)
                    LA_y = int(y_str)
                    ls_x = int(ls_x_str)
                    ls_y = int(ls_y_str)
                    RA_x = int(ra_x_str)
                    RA_y = int(ra_y_str)
                    rs_x = int(rs_x_str) 
                    rs_y = int(rs_y_str)
                    lh_y = int(lh_y_str)
                    rh_y = int(rh_y_str)
                    lf_y = int(lf_y_str)
                    rf_y = int(rf_y_str)
                    #print(f"[Parsed] LA_x = {LA_x}, LA_y = {LA_y}, LS_x = {ls_x}, LS_y = {ls_y}, RA_x={RA_x}, RA_y={RA_y}, RS_x = {rs_x}, RS_y = {rs_y},LH_y = {lh_y}, RH_y = {rh_y}, LF_y = {lf_y}, RF_y = {rf_y}")
                except ValueError:
                    print("[Warning] Malformed message:", line)

    except Exception as e:
        print("[Error]", e)
    finally:
        conn.close()
        print(f"[-] Connection from {addr} closed")
        
# Main server setup
HOST = '0.0.0.0'
PORT = 5000

server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.bind((HOST, PORT))
server.listen()


def client_restart():
    while True:
        conn, addr = server.accept()
        # Start a new thread for each client
        client_thread = threading.Thread(target=handle_client, args=(conn, addr))
        client_thread.start()

            

def mode_select(Mode):
    global reset
    if Mode == 'Start':
        reset=1
        print('Homing started')
    if Mode == 'calibration':
        reset=2
        threading.Thread(target=calibration).start()
        calibration_done.clear()
        print('Calibration started')
    elif Mode == 'mirroring':
        reset=3
        threading.Thread(target=move_stepper).start()
        move_stepper_done.clear()
        print('Mirroring started')
    elif Mode == 'stop mirroring':
        reset=4
        move_stepper_done.set()
        print("Exiting loop.")
    elif Mode == 'reset':
        reset=5
        threading.Thread(target=A_pose_reset).start()
        A_pose_reset_done.clear()
        print('Quit and reset to A pose')

        


def calibration():
    global LA_x, LA_y, RA_x, RA_y
    global ls_x, ls_y, rs_x, rs_y
    global lh_y, rh_y, lf_y, rf_y
    global left_shoulder_x, left_shoulder_y , right_shoulder_x , right_shoulder_y, left_hip_y, right_hip_y
    global anchor_la_x, anchor_la_y, anchor_ra_x, anchor_ra_y, anchor_lf_y, anchor_rf_y, anchor_shoulder, anchor_hip
    global max_LA_x_range, max_LA_y_range, max_RA_x_range, max_RA_y_range, max_bow_range
    global left_arm_length,right_arm_length, right_leg_height, left_leg_height
    global LA_x_step_count, LA_y_step_count, RA_x_step_count, RA_y_step_count, lf_y_step_count, rf_y_step_count, shoulder_step_count, hip_step_count
    if not calibration_done.is_set():
        anchor_la_x=LA_x
        anchor_la_y=LA_y
        anchor_ra_x=RA_x
        anchor_ra_y=RA_y
        anchor_lf_y=lf_y
        anchor_rf_y=rf_y 
        left_shoulder_x=ls_x
        left_shoulder_y=ls_y
        right_shoulder_x=rs_x
        right_shoulder_y=rs_y
        left_hip_y=lh_y
        right_hip_y=rh_y
        anchor_shoulder = (left_shoulder_y+right_shoulder_y)/2
        anchor_hip = (left_hip_y+right_hip_y)/2
        left_arm_length=math.sqrt(abs(left_shoulder_x - LA_x)**2 +abs(left_shoulder_y - LA_y)**2)
        right_arm_length=math.sqrt(abs(right_shoulder_x - RA_x)**2 +abs(right_shoulder_y - RA_y)**2)
        left_leg_height = anchor_lf_y - left_hip_y 
        right_leg_height = anchor_rf_y- right_hip_y
        max_LA_x_range = left_arm_length 
        max_LA_y_range = left_arm_length*2
        max_RA_x_range = right_arm_length 
        max_RA_y_range = right_arm_length*2
        max_bow_range = (anchor_shoulder-anchor_hip)
        shoulder_step_count= int(abs((ls_y-left_shoulder_y)/max_bow_range)*max_bow_y_step_range)
        hip_step_count = int((abs(anchor_hip -lh_y)/left_leg_height)*max_hip_y_step_range)
        RA_x_step_count=int((abs(anchor_la_x - left_shoulder_x)/max_LA_x_range)*max_arm_x_step_range)  #left_arm_a_pose_x_step
        RA_y_step_count=int(((abs(anchor_la_y- (left_shoulder_y - left_arm_length)))/max_LA_y_range)*max_arm_y_step_range) #left_arm_a_pose_y_step
        LA_x_step_count= int((abs(anchor_ra_x - right_shoulder_x)/max_RA_x_range)*max_arm_x_step_range) #right_arm_a_pose_x_step
        LA_y_step_count=int(((abs(anchor_ra_y- (right_shoulder_y - right_arm_length)))/max_LA_y_range)*max_arm_y_step_range) #right_arm_a_pose_y_step
        rf_y_step_count=int((abs(left_hip_y - anchor_lf_y)/left_leg_height)*max_leg_y_step_range) #left leg a pose step count
        lf_y_step_count=int((abs(right_hip_y- anchor_rf_y)/right_leg_height)*max_leg_y_step_range) #right leg a pose step count
        print(f"Calibrating... anchor_la_x: {anchor_la_x}, anchor_la_y: {anchor_la_y}, anchor_ra_x: {anchor_ra_x}, anchor_ra_y: {anchor_ra_y}, anchor_lf_y: {anchor_lf_y}, anchor_rf_y: {anchor_rf_y}")
        print(f"max_LA_x_range: {max_LA_x_range}, max_LA_y_range: {max_LA_y_range}")
        print(f"max_RA_x_range: {max_RA_x_range}, max_RA_y_range: {max_RA_y_range}")
        print(f"left_leg_height: {left_leg_height}, right_leg_height: {right_leg_height}")
        print("Calibration complete!")
        command_done.clear()  # Signal completion
        calibration_done.set()
def move_stepper(): 
    global LA_y,RA_y
    global LA_x,RA_x
    global left_arm_length , right_arm_length
    global LA_x_step_count , RA_x_step_count
    global LA_y_step_count , RA_y_step_count
    global lh_y, rh_y, lf_y, rf_y, ls_y
    global left_hip_y, right_hip_y
    global max_arm_x_step_range ,max_leg_y_step_range,max_arm_y_step_range, max_bow_y_step_range
    global left_shoulder_x, left_shoulder_y
    global max_LA_x_range
    global max_LA_y_range,max_bow_range
    global lf_y_step_count,rf_y_step_count
    global left_leg_height,right_leg_height
    global shoulder_step_count ,hip_step_count
    while not move_stepper_done.is_set():
        try:
            RA_x_step_count=int(((LA_x - left_shoulder_x)/max_LA_x_range)*max_arm_x_step_range)
            RA_y_step_count=int(((abs(LA_y- (left_shoulder_y - left_arm_length)))/max_LA_y_range)*max_arm_y_step_range)
            LA_x_step_count= int((RA_x - right_shoulder_x)/max_RA_x_range)*max_arm_x_step_range*(-1)
            LA_y_step_count=int(((abs(RA_y- (right_shoulder_y - right_arm_length)))/max_LA_y_range)*max_arm_y_step_range)
            rf_y_step_count=int((abs(left_hip_y - lf_y)/left_leg_height)*max_leg_y_step_range)
            lf_y_step_count=int((abs(right_hip_y- rf_y)/right_leg_height)*max_leg_y_step_range)
            shoulder_step_count= int(abs((ls_y-left_shoulder_y)/max_bow_range)*max_bow_y_step_range)
            hip_step_count = int((abs(left_hip_y -lh_y)/left_leg_height)*max_hip_y_step_range)
            #print(f"shoulder_step_count: {shoulder_step_count}")
            #print(f"hip_step_count : {hip_step_count }")
            #print(f"LA_x_step_count: {LA_x_step_count}, LA_y_step_count:  {LA_y_step_count}")
            #print(f"RA_x_step_count: {RA_x_step_count}, RA_y_step_count:  {RA_y_step_count}")
            #print(f"LF_y_step_count: {lf_y_step_count}, RF_y_step_count:  {rf_y_step_count}")
        except (IndexError, AttributeError):
            # Keep the previous value if detection fails
            pass
        time.sleep(0.06)
    
def A_pose_reset():
    global LA_x_step_count, RA_x_step_count
    global LA_y_step_count, RA_y_step_count
    global lf_y_step_count,rf_y_step_count, shoulder_step_count ,hip_step_count 
    if not A_pose_reset_done.is_set():
        LA_x_step_count=0
        LA_y_step_count=0
        RA_x_step_count=0
        RA_y_step_count=0
        lf_y_step_count=0
        rf_y_step_count=0
        hip_step_count = 0 
        shoulder_step_count =0
        print("LA_x_step_count ", LA_x_step_count)
        print("LA_y_step_count ", LA_y_step_count)
        print("RA_x_step_count ", RA_x_step_count)
        print("RA_y_step_count ", RA_y_step_count)
        print("lf_y_step_count ", lf_y_step_count)
        print("rf_y_step_count ", rf_y_step_count)
        print("hip_step_count ", hip_step_count)
        print("shoulder_step_count ", shoulder_step_count)
        A_pose_reset_done.set()
       
def Arduino_data_transmission():
    global reset
    global LA_x_step_count, RA_x_step_count
    global LA_y_step_count, RA_y_step_count
    global lf_y_step_count, rf_y_step_count, shoulder_step_count, hip_step_count
    global message
    global ser  # So we can reopen if needed

    while True:
        message = f"{shoulder_step_count} {hip_step_count} {LA_x_step_count} {LA_y_step_count} {RA_x_step_count} {RA_y_step_count} {lf_y_step_count} {rf_y_step_count} {reset}\n"

        try:
            ser.write(message.encode())  # Try to send
            print(f"[Sent] {message.strip()}")
            time.sleep(0.05)  # (Short wait to let Arduino respond)
            while ser.in_waiting > 0:  # While Arduino has sent something
                line = ser.readline().decode('utf-8').strip()
                print(f"[Arduino] {line}")
        except serial.SerialException as e:
            print("[Error] Serial write failed:", e)
            print("[Action] Attempting to reconnect...")
            # Try to reconnect
        time.sleep(0.1)  # Add a tiny delay so we don't flood
client_restart_thread=threading.Thread(target=client_restart)  
client_restart_thread.start()              
Arduino_data_transmission_thread=threading.Thread(target=Arduino_data_transmission)  
Arduino_data_transmission_thread.start()  


def start_thread(task_name):
    thread = threading.Thread(target=mode_select, args=(task_name,))
    thread.start()

def show_next_button(index):
    if index < len(buttons):
        buttons[index].pack(pady=20)

def reset_buttons():
    # Hide all buttons
    for btn in buttons:
        btn.pack_forget()
    # Show only the first button again
    buttons[0].pack(pady=20)
# Set up the GUI
window = tk.Tk()
window.title("Marionette Mode Selector")
window.geometry("300x500")

# Initialize the buttons list
buttons = []

button_style = {
    "bg": "#4CAF50",
    "fg": "white",
    "activebackground": "#45a049",
    "activeforeground": "white",
    "font": ("Helvetica", 12, "bold"),
    "width": 25,
    "height": 2,
}
# Create multiple buttons (only pack the first one)
button1 = tk.Button(window, text="Task 1: Start",
                    command=lambda: (start_thread("Start"), show_next_button(1)),**button_style)
button1.pack(pady=20)
buttons.append(button1)

button2 = tk.Button(window, text="Task 2: Calibration",
                    command=lambda: (start_thread("calibration"), show_next_button(2)),**button_style)
buttons.append(button2)

button3 = tk.Button(window, text="Task 3: Mirroring",
                    command=lambda: (start_thread("mirroring"), show_next_button(3)),**button_style)
buttons.append(button3)

button4 = tk.Button(window, text="Task 4: Stop Mirroring",
                    command=lambda: (start_thread("stop mirroring"), show_next_button(4)),**button_style)
buttons.append(button4)

button5 = tk.Button(window, text="Task 5: Reset",
                    command=lambda: (start_thread("reset"),  reset_buttons()),**button_style)
buttons.append(button5)

# Run the GUI event loop
window.mainloop()
